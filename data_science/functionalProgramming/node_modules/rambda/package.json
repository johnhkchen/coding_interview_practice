{
  "_args": [
    [
      {
        "raw": "rambda",
        "scope": null,
        "escapedName": "rambda",
        "name": "rambda",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/johnchen/coding_interview_practice/data_science/functionalProgramming"
    ]
  ],
  "_from": "rambda@latest",
  "_id": "rambda@0.5.6",
  "_inCache": true,
  "_location": "/rambda",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/rambda-0.5.6.tgz_1491154091824_0.24695678590796888"
  },
  "_npmUser": {
    "name": "self_refactor",
    "email": "deyan8284@gmail.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rambda",
    "scope": null,
    "escapedName": "rambda",
    "name": "rambda",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/rambda/-/rambda-0.5.6.tgz",
  "_shasum": "5240e5a620d18734b830a74bffcb941b00d5e178",
  "_shrinkwrap": null,
  "_spec": "rambda",
  "_where": "/Users/johnchen/coding_interview_practice/data_science/functionalProgramming",
  "author": {
    "name": "self_refactor"
  },
  "bugs": {
    "url": "https://github.com/selfrefactor/rambda/issues"
  },
  "dependencies": {},
  "description": "Lightweight alternative to Ramda",
  "devDependencies": {
    "beautify-benchmark": "^0.2.4",
    "benchmark": "^2.1.3",
    "jest": "^18.1.0",
    "lodash": "^4.17.4",
    "ramda": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "5240e5a620d18734b830a74bffcb941b00d5e178",
    "tarball": "https://registry.npmjs.org/rambda/-/rambda-0.5.6.tgz"
  },
  "gitHead": "283e3a0be6299d51f9b0966b072eab2fd84bb25e",
  "homepage": "https://github.com/selfrefactor/rambda#readme",
  "keywords": [
    "ramda",
    "fp",
    "functional",
    "utility"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "self_refactor",
      "email": "deyan8284@gmail.com"
    }
  ],
  "name": "rambda",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/selfrefactor/ils.svg?branch=master)](https://travis-ci.org/selfrefactor/rambda)\n[![codecov](https://codecov.io/gh/selfrefactor/rambda/branch/master/graph/badge.svg)](https://codecov.io/gh/selfrefactor/rambda)\n\n# Rambda\n\nFaster alternative to **Ramda** in just 7kB\n\n## Argumentation\n\nI admire ***Ramda*** as it is great library in what it does, but I used only small part of what it offers.\n\nI wanted to optimize the size of my bundle, but already developed Ramda habits.\n\nThis lead me to the idea to recreate the funtionality of some Ramda methods and export that as library.\n\n## Example use\n\n```\nconst R = require(\"rambda\")\nconst result = R.compose(\n  R.filter(val => val>2),\n  R.flatten,\n)([ [1], [2], [3], 4])\nconsole.log(result) // => [3,4]\n```\n\n## Install\n\n- Use **npm i rambda** for Webpack and Node.js\n\n- For browser usage include in your HTML\n\n```\nhttps://cdnjs.cloudflare.com/ajax/libs/rambda/0.5.6/webVersion.js\n```\n\n## Differences between Rambda and Ramda\nRambda shadows only small part of the Ramda's API.\n\nA few things to note:\n\n- Rambda's methods should be compatible with most of the basic Ramda's methods. For more complex and Ramda specific methods(such as **R.__**), you should expect a mismatch.\n\n- **Rambda** is tested for compatability with **Ramda.flip**, as this method could be useful in some cases.\n\n- Rambda's **equals** doesn't protect against circular structures as **Ramda.equals** does\n\n- Rambda's **map/filter** works only for arrays, while Ramda's **map/filter** accept also objects\n\n- Rambda's **type** detect async functions. The returned value is `\"Async\"`\n\n## Benchmark\n\n[Scroll to API](#api-list)\n\n![Screen](/screens/screen1.png)\n![Screen](/screens/screen2.png)\n\n## Disclaimer\n\n- Documentation of the methods below is scraped from Ramda's website and could be removed in the future, if requested from Ramda's side.\n\n## API\n\n## api-list\n\n#### add\n\n- Adds two values.\n\n```javascript\nR.add(2, 3);       //=>  5\nR.add(7)(10);      //=> 17\n```\n\n#### adjust\n\n- Applies a function to the value at the given index of an array, returning a\nnew copy of the array with the element at the given index replaced with the\nresult of the function application.\n\n```javascript\nR.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]\nR.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]\n```\n\n#### any\n\n- Returns true if at least one of elements of the list match the predicate,\nfalse otherwise.\nDispatches to the any method of the second argument, if present.\nActs as a transducer if a transformer is given in list position.\n\n```javascript\nvar lessThan0 = R.flip(R.lt)(0);\nvar lessThan2 = R.flip(R.lt)(2);\nR.any(lessThan0)([1, 2]); //=> false\nR.any(lessThan2)([1, 2]); //=> true\n```\n\n#### append\n\n- Returns a new list containing the contents of the given list, followed by\nthe given element.\n\n```javascript\nR.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\nR.append('tests', []); //=> ['tests']\nR.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n```\n\n#### contains\n\n- Returns true if the specified value is equal, in R.equals terms, to at\nleast one element of the given list; false otherwise.\n\n```javascript\nR.contains(3, [1, 2, 3]); //=> true\nR.contains(4, [1, 2, 3]); //=> false\nR.contains([42], [[42]]); //=> true\n```\n\n#### drop\n\n- Returns all but the first n elements of the given list, string, or\ntransducer/transformer (or object with a drop method).\nDispatches to the drop method of the second argument, if present.\n\n```javascript\nR.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\nR.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\nR.drop(3, ['foo', 'bar', 'baz']); //=> []\nR.drop(4, ['foo', 'bar', 'baz']); //=> []\nR.drop(3, 'ramda');               //=> 'da'\n```\n\n#### dropLast\n\n- Returns a list containing all but the last n elements of the given list.\n\n```javascript\nR.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\nR.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\nR.dropLast(3, ['foo', 'bar', 'baz']); //=> []\nR.dropLast(4, ['foo', 'bar', 'baz']); //=> []\nR.dropLast(3, 'ramda');               //=> 'ra'\n```\n\n#### equals\n\n- Returns true if its arguments are equivalent, false otherwise. Handles\ncyclical data structures.\nDispatches symmetrically to the equals methods of both arguments, if\npresent.\n\n```javascript\nR.equals(1, 1); //=> true\nR.equals(1, '1'); //=> false\nR.equals([1, 2, 3], [1, 2, 3]); //=> true\n\nvar a = {}; a.v = a;\nvar b = {}; b.v = b;\nR.equals(a, b); //=> true\n```\n\n#### filter\n\n- Takes a predicate and a \"filterable\", and returns a new filterable of the\nsame type containing the members of the given filterable which satisfy the\ngiven predicate.\nDispatches to the filter method of the second argument, if present.\nActs as a transducer if a transformer is given in list position.\n\n```javascript\nvar isEven = n => n % 2 === 0;\n\nR.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n\nR.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n```\n\n#### find\n\n- Returns the first element of the list which matches the predicate, or\nundefined if no element matches.\nDispatches to the find method of the second argument, if present.\nActs as a transducer if a transformer is given in list position.\n\n```javascript\nvar xs = [{a: 1}, {a: 2}, {a: 3}];\nR.find(R.propEq('a', 2))(xs); //=> {a: 2}\nR.find(R.propEq('a', 4))(xs); //=> undefined\n```\n\n#### findIndex\n\n- Returns the index of the first element of the list which matches the\npredicate, or -1 if no element matches.\nDispatches to the findIndex method of the second argument, if present.\nActs as a transducer if a transformer is given in list position.\n\n```javascript\nvar xs = [{a: 1}, {a: 2}, {a: 3}];\nR.findIndex(R.propEq('a', 2))(xs); //=> 1\nR.findIndex(R.propEq('a', 4))(xs); //=> -1\n```\n\n#### flatten\n\n- Returns a new list by pulling every item out of it (and all its sub-arrays)\nand putting them in a new array, depth-first.\n\n```javascript\nR.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n//=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```\n\n#### head\n\n- Returns the first element of the given list or string. In some libraries\nthis function is named first.\n\n```javascript\nR.head(['fi', 'fo', 'fum']); //=> 'fi'\nR.head([]); //=> undefined\n\nR.head('abc'); //=> 'a'\nR.head(''); //=> ''\n```\n\n#### indexOf\n\n- Returns the position of the first occurrence of an item in an array, or -1\nif the item is not included in the array. R.equals is used to determine\nequality.\n\n```javascript\nR.indexOf(3, [1,2,3,4]); //=> 2\nR.indexOf(10, [1,2,3,4]); //=> -1\n```\n\n#### init\n\n- Returns all but the last element of the given list or string.\n\n```javascript\nR.init([1, 2, 3]);  //=> [1, 2]\nR.init([1, 2]);     //=> [1]\nR.init([1]);        //=> []\nR.init([]);         //=> []\n\nR.init('abc');  //=> 'ab'\nR.init('ab');   //=> 'a'\nR.init('a');    //=> ''\nR.init('');     //=> ''\n```\n\n#### join\n\n- Returns a string made by inserting the separator between each element and\nconcatenating all the elements into a single string.\n\n```javascript\nvar spacer = R.join(' ');\nspacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\nR.join('|', [1, 2, 3]);    //=> '1|2|3'\n```\n\n#### last\n\n- Returns the last element of the given list or string.\n\n```javascript\nR.last(['fi', 'fo', 'fum']); //=> 'fum'\nR.last([]); //=> undefined\n\nR.last('abc'); //=> 'c'\nR.last(''); //=> ''\n```\n\n#### length\n\n- Returns the number of elements in the array by returning list.length.\n\n```javascript\nR.length([]); //=> 0\nR.length([1, 2, 3]); //=> 3\n```\n\n#### map\n\n- Takes a function and\na functor,\napplies the function to each of the functor's values, and returns\na functor of the same shape.\nRamda provides suitable map implementations for Array and Object,\nso this function may be applied to [1, 2, 3] or {x: 1, y: 2, z: 3}.\nDispatches to the map method of the second argument, if present.\nActs as a transducer if a transformer is given in list position.\nAlso treats functions as functors and will compose them together.\n\n```javascript\nvar double = x => x * 2;\n\nR.map(double, [1, 2, 3]); //=> [2, 4, 6]\n\nR.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n```\n\n#### match\n\n- Tests a regular expression against a String. Note that this function will\nreturn an empty array when there are no matches. This differs from\nString.prototype.match\nwhich returns null when there are no matches.\n\n```javascript\nR.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\nR.match(/a/, 'b'); //=> []\nR.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n```\n\n#### merge\n\n- Create a new object with the own properties of the first object merged with\nthe own properties of the second object. If a key exists in both objects,\nthe value from the second object will be used.\n\n```javascript\nR.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n//=> { 'name': 'fred', 'age': 40 }\n\nvar resetToDefault = R.merge(R.__, {x: 0});\nresetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n```\n\n#### omit\n\n- Returns a partial copy of an object omitting the keys specified.\n\n```javascript\nR.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n```\n\n#### path\n\n- Retrieve the value at a given path.\n\n```javascript\nR.path(['a', 'b'], {a: {b: 2}}); //=> 2\nR.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n```\n\n#### pick\n\n- Returns a partial copy of an object containing only the keys specified. If\nthe key does not exist, the property is ignored.\n\n```javascript\nR.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\nR.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n```\n\n#### prepend\n\n- Returns a new list with the given element at the front, followed by the\ncontents of the list.\n\n```javascript\nR.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n```\n\n#### prop\n\n- Returns a function that when supplied an object returns the indicated\nproperty of that object, if it exists.\n\n```javascript\nR.prop('x', {x: 100}); //=> 100\nR.prop('x', {}); //=> undefined\n```\n\n#### propEq\n\n- Returns true if the specified object property is equal, in R.equals\nterms, to the given value; false otherwise.\n\n```javascript\nvar abby = {name: 'Abby', age: 7, hair: 'blond'};\nvar fred = {name: 'Fred', age: 12, hair: 'brown'};\nvar rusty = {name: 'Rusty', age: 10, hair: 'brown'};\nvar alois = {name: 'Alois', age: 15, disposition: 'surly'};\nvar kids = [abby, fred, rusty, alois];\nvar hasBrownHair = R.propEq('hair', 'brown');\nR.filter(hasBrownHair, kids); //=> [fred, rusty]\n```\n\n#### range\n\n- Returns a list of numbers from from (inclusive) to to (exclusive).\n\n```javascript\nR.range(1, 5);    //=> [1, 2, 3, 4]\nR.range(50, 53);  //=> [50, 51, 52]\n```\n\n#### repeat\n\n- Returns a fixed list of size n containing a specified identical value.\n\n```javascript\nR.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n\nvar obj = {};\nvar repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\nrepeatedObjs[0] === repeatedObjs[1]; //=> true\n```\n\n#### replace\n\n- Replace a substring or regex match in a string with a replacement.\n\n```javascript\nR.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\nR.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n\n// Use the \"g\" (global) flag to replace all occurrences:\nR.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n```\n\n#### sort\n\n- Returns a copy of the list, sorted according to the comparator function,\nwhich should accept two values at a time and return a negative number if the\nfirst value is smaller, a positive number if it's larger, and zero if they\nare equal. Please note that this is a copy of the list. It does not\nmodify the original.\n\n```javascript\nvar diff = function(a, b) { return a - b; };\nR.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n```\n\n#### sortBy\n\n- Sorts the list according to the supplied function.\n\n```javascript\nvar sortByFirstItem = R.sortBy(R.prop(0));\nvar sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\nvar pairs = [[-1, 1], [-2, 2], [-3, 3]];\nsortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\nvar alice = {\n  name: 'ALICE',\n  age: 101\n};\nvar bob = {\n  name: 'Bob',\n  age: -10\n};\nvar clara = {\n  name: 'clara',\n  age: 314.159\n};\nvar people = [clara, bob, alice];\nsortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n```\n\n#### split\n\n- Splits a string into an array of strings based on the given\nseparator.\n\n```javascript\nvar pathComponents = R.split('/');\nR.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n\nR.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n```\n\n#### splitEvery\n\n- Splits a collection into slices of the specified length.\n\n```javascript\nR.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\nR.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n```\n\n#### subtract\n\n- Subtracts its second argument from its first argument.\n\n```javascript\nR.subtract(10, 8); //=> 2\n\nvar minus5 = R.subtract(R.__, 5);\nminus5(17); //=> 12\n\nvar complementaryAngle = R.subtract(90);\ncomplementaryAngle(30); //=> 60\ncomplementaryAngle(72); //=> 18\n```\n\n#### tail\n\n- Returns all but the first element of the given list or string (or object\nwith a tail method).\nDispatches to the slice method of the first argument, if present.\n\n```javascript\nR.tail([1, 2, 3]);  //=> [2, 3]\nR.tail([1, 2]);     //=> [2]\nR.tail([1]);        //=> []\nR.tail([]);         //=> []\n\nR.tail('abc');  //=> 'bc'\nR.tail('ab');   //=> 'b'\nR.tail('a');    //=> ''\nR.tail('');     //=> ''\n```\n\n#### take\n\n- Returns the first n elements of the given list, string, or\ntransducer/transformer (or object with a take method).\nDispatches to the take method of the second argument, if present.\n\n```javascript\nR.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\nR.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\nR.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\nR.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\nR.take(3, 'ramda');               //=> 'ram'\n\nvar personnel = [\n  'Dave Brubeck',\n  'Paul Desmond',\n  'Eugene Wright',\n  'Joe Morello',\n  'Gerry Mulligan',\n  'Bob Bates',\n  'Joe Dodge',\n  'Ron Crotty'\n];\n\nvar takeFive = R.take(5);\ntakeFive(personnel);\n//=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n```\n\n#### takeLast\n\n- Returns a new list containing the last n elements of the given list.\nIf n > list.length, returns a list of list.length elements.\n\n```javascript\nR.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\nR.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\nR.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\nR.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\nR.takeLast(3, 'ramda');               //=> 'mda'\n```\n\n#### test\n\n- Determines whether a given string matches a given regular expression.\n\n```javascript\nR.test(/^x/, 'xyz'); //=> true\nR.test(/^y/, 'xyz'); //=> false\n```\n\n#### toLower\n\n- The lower case version of a string.\n\n```javascript\nR.toLower('XYZ'); //=> 'xyz'\n```\n\n#### toUpper\n\n- The upper case version of a string.\n\n```javascript\nR.toUpper('abc'); //=> 'ABC'\n```\n\n#### trim\n\n- Removes (strips) whitespace from both ends of the string.\n\n```javascript\nR.trim('   xyz  '); //=> 'xyz'\nR.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n```\n\n#### type\n\n- Gives a single-word string description of the (native) type of a value,\nreturning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\nattempt to distinguish user Object types any further, reporting them all as\n'Object'.\n\n```javascript\nR.type({}); //=> \"Object\"\nR.type(1); //=> \"Number\"\nR.type(false); //=> \"Boolean\"\nR.type('s'); //=> \"String\"\nR.type(null); //=> \"Null\"\nR.type([]); //=> \"Array\"\nR.type(/[A-z]/); //=> \"RegExp\"\n```\n\n#### uniq\n\n- Returns a new list containing only one copy of each element in the original\nlist. R.equals is used to determine equality.\n\n```javascript\nR.uniq([1, 1, 2, 1]); //=> [1, 2]\nR.uniq([1, '1']);     //=> [1, '1']\nR.uniq([[42], [42]]); //=> [[42]]\n```\n\n#### update\n\n- Returns a new copy of the array with the element at the provided index\nreplaced with the given value.\n\n```javascript\nR.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\nR.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n```\n\n#### values\n\n- Returns a list of all the enumerable own properties of the supplied object.\nNote that the order of the output array is not guaranteed across different\nJS platforms.\n\n```javascript\nR.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/selfrefactor/rambda.git"
  },
  "scripts": {
    "cover": "jest --coverage",
    "de": "git add . --all&&git commit -m update&&git push",
    "test": "jest"
  },
  "version": "0.5.6"
}
